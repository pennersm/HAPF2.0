#!/bin/sh
# Declarations generated by RPM postinstall script
cd /usr/local/certifsub
CERTIFIER_DIR=/usr/local/certifsub
LINUX_INSTALL=true
MY_NAME=certifsub
MY_LONG_NAME="Insta Certifier Subordinate Server"

INSTALL_SYBASE_ODBC=true
DSN='DSN=certifier'
############################################################################
# NSN INSTA HAPF RAPID SETUP CONFIG
#--------------------------------------------------------------------------
# Script default name   : ~script/config_insta.sh
# Configure version     : mkks62g.pl
# Media set             : PF21I52RH64-12
# File generated        : 19.07.2013 MPe
#
###########################################################################
#
#   This script is called by config_insta.sh
#
trap "" 2 20
shf_logit "#--------------------------------------------------------------------------"
shf_logit " entering Insta setup routine ssh-ca-setup for FE role"
export -p SHELLOG=${INSTDIR}/config_insta.sh.${ROLE}.${NOW}.shell.log
MYSELF="config_insta.sh-ssh-ca-setup"
#--------------------------------------------------------------------------
# either inherited or defaulted

if [ $# -ne 3 ]
then
        shf_logit "missing arguments and that will not work I bail out"
        return 1
fi
ROLE="$1"
shf_set_index
MYTARGET="$2"  ;
NSNPSK="$3"
: ${CUSER:="certfier"}
# --- this programs variables ---------------
cuser=${CUSER}
psk=${NSNPSK}
eaddr=${MYTARGET}

shf_logit "using configure index $X, will define ${MYTARGET}"
#------------------------------------------------------------------------
if ! rpm -q "certifsub" &>/dev/null ; then
        shf_logit "package certifsub is not installed and hence I wont go anywhere from here!"
        return 5
fi

if ! ls $CERTIFIER_DIR/sybase/sqlanywhere12-odbc.tar.gz &>/dev/null; then
        shf_logit "no archive to install ODBC driver, this seems no clean install!"
        NSNOCLEAN="noclean"
fi
#------------------------------------------------------------------------
alias rm='rm -f'
alias mv='mv -f'
alias cp='cp -f'
shf_logit "disabling boring precautions: `alias mv;` `alias rm;` `alias cp`"


# End of declarations generated by RPM postinstall script
#!/bin/sh
#
# ssh-ca-sub-setup
#
# Copyright (C) 2006 Insta DefSec Oy
#                  All rights reserved
#

umask 077
DBODBC=libdbodbc12
MY_PAGER=${PAGER:-"more"}
CERTIFIER_USER=${CERTIFIER_USER:-"certfier"}
if [ "Xtrue" != "X"$SOLARIS_INSTALL -a \
     "Xtrue" != "X"$LINUX_INSTALL   -a \
     "Xtrue" != "X"$HPUX_INSTALL ] ; then
  RELEASE_POSTINSTALL=false
  SSH_CA_SERVER=`pwd`/`uname`/bin/ssh-ca-server
  CERTIFIER_DIR=`pwd`
  MY_NAME=${MY_NAME:-"certifsub"}
else
  CERTIFIER_DIR=${PKG_INSTALL_ROOT}${CERTIFIER_DIR}
  SSH_CA_SERVER=${CERTIFIER_DIR}/bin/ssh-ca-server
  RELEASE_POSTINSTALL=true
fi
DSN=${DSN:-"DSN=certifier"}
export DSN
UPGRADE_IN_PROGRESS=false


# Solaris obviously has a broken /bin/awk.
if [ -x /usr/xpg4/bin/awk ]; then
  AWK=/usr/xpg4/bin/awk
else
  AWK=awk
fi


# Check if SELinux is enabled
SELINUX_STATUS=disabled
if sestatus ; then
    SELINUX_STATUS=`sestatus |grep "SELinux status:" | awk '{print $3}'`
fi 2>/dev/null


PATH=${PATH}:/usr/sbin:/usr/ucb
export PATH
cd $CERTIFIER_DIR
if [ ! -w . ]; then
  echo The Certifier directory must be writable.
  exit 2
fi

if [ -r ${CERTIFIER_DIR}/lib/license.txt ]; then
  cat <<EOF

This program will finalize the installation of 
${MY_LONG_NAME} on your computer.

This software is protected by copyright law and international treaties.

Unauthorized reproduction or distribution of this program, or any portion of 
it, may result in severe civil and criminal penalties, and will be prosecuted 
to the maximum extent possible under law.

Read license conditions from ${CERTIFIER_DIR}/lib/license.txt.

Press ENTER to continue.
EOF
###############################################################
#
# NSN HAPF modifications done here :
#-------------------------------------------------------------
# removed following lines:
#  read ignore
#============================================================
# added following lines
  cat ${CERTIFIER_DIR}/lib/license.txt &>> ${SHELLOG}
  shf_logit "make sure you read and acknowledge the EULA ${CERTIFIER_DIR}/lib/license.txt !"
###############################################################
fi


if [ -r ./ssh-ca-upgrade ]; then
  mv ./ssh-ca-upgrade ./ssh-ca-setup
fi
if [ -r ssh-ca-stop ]; then ./ssh-ca-stop; fi

##############################################################
#
# NSN HAPF modifications done here :
#-------------------------------------------------------------
# removed following lines:
# 
#if [ $# -gt 0 ]; then 
#  echo "Upgrading from backup file $1"
#  cd bin  
#  ./ssh-ca-backup-sub $1 -restore-for-upgrade
#  cd $CERTIFIER_DIR
#fi
#============================================================
# added following lines
  shf_logit "ability for updates from backup is disabled, HAPF does install only"
###############################################################

PKIDIR_RESTORED=false
PKIDIR_OBSOLETE=false # Upgrade from v.<2.1.0, no cacom server policy oids in certs

if [ -r ./var/upgrade_in_progress ]; then
  if [ -r  $CERTIFIER_DIR/var/upgrade_in_progress ]; then
    echo "We are upgrading from an existing Certifier installation. "
    echo
  fi
  OLD_VERSION=`cat ./var/upgrade_in_progress`
  rm ./var/upgrade_in_progress
  UPGRADE_IN_PROGRESS=true
else
  OLD_VERSION=none
fi

LD_LIBRARY_PATH=$CERTIFIER_DIR/lib:/lib:/usr/local/lib
export LD_LIBRARY_PATH

if [ "X"$INSTALL_SYBASE_ODBC = "Xtrue" ] ; then
  export CERTIFIER_DIR
  ODBCINI=${CERTIFIER_DIR}/var/odbc.ini
  export ODBCINI
  DBPASS=sql

  echo Installing Sybase SQL Anywhere 12 ODBC driver
  cd $CERTIFIER_DIR/sybase
  if [ "Xtrue" = "X$SOLARIS_INSTALL" ]; then
    gunzip $CERTIFIER_DIR/sybase/sqlanywhere12-odbc.tar.gz
    tar -xf $CERTIFIER_DIR/sybase/sqlanywhere12-odbc.tar
    rm -r $CERTIFIER_DIR/sybase/sqlanywhere12-odbc.tar
  else
    tar -xzf $CERTIFIER_DIR/sybase/sqlanywhere12-odbc.tar.gz
    rm -r $CERTIFIER_DIR/sybase/sqlanywhere12-odbc.tar.gz
  fi
  cd $CERTIFIER_DIR

  #
  # Create a template odbc.ini
  #
  if [ -r "${CERTIFIER_DIR}/odbc.ini-sshbak" ]; then
    # We are upgrading and the old odbc.ini is available
    <"${CERTIFIER_DIR}/odbc.ini-sshbak" >"$ODBCINI" sed \
        -e 's/dbodbc7/dbodbc8/g' \
        -e 's/dbodbc8/libdbodbc11/g' \
        -e 's/libdbodbc11/libdbodbc12/g' \
        -e 's#sybase/lib/#sybase/lib64/#g' \
        -e 's#sybase/lib32#sybase/lib64#g' \
        -e 's#'"${CERTIFIER_DIR}"'/sybase/lib#/opt/sqlanywhere12/lib#g' \
        -e 's#/opt/sqlanywhere11/lib32#/opt/sqlanywhere12/lib64#g' \
        -e 's#/usr/local/certifsub#'"${CERTIFIER_DIR}"'#g' \
        -e 's#/opt/certifsub#'"${CERTIFIER_DIR}"'#g' \
        -e "s/\.so\.1/.so.1/g" \
        -e "s/\.sl\.1/.so.1/g"
    rm "${CERTIFIER_DIR}/odbc.ini-sshbak"
  else
    echo "["$DSN"]" | sed -e 's/DSN=//g' >$ODBCINI
    echo 'Driver='${CERTIFIER_DIR}/sybase/lib32/${DBODBC}.so.1  >>$ODBCINI
    cat >>$ODBCINI <<EOF
UID=DBA
PWD=$DBPASS
DatabaseName=certifier
EngineName=certdbeng
EOF
  fi
  chmod 600 ${ODBCINI}
fi

NEW_VERSION="`./bin/ssh-ca-server -v`"

if [ -d $CERTIFIER_DIR/pki-sshbak -o -d $CERTIFIER_DIR/var/pki-sshbak -o -d $CERTIFIER_DIR/subpki-sshbak ]; then
   if [ -d $CERTIFIER_DIR/var/pki ] ; then
      rm -rf $CERTIFIER_DIR/var/pki
   fi
   if [ -d $CERTIFIER_DIR/pki-sshbak ]; then
     mv $CERTIFIER_DIR/pki-sshbak $CERTIFIER_DIR/var/pki
     PKIDIR_RESTORED=true
   fi
   if [ -d $CERTIFIER_DIR/subpki-sshbak ]; then
     mv $CERTIFIER_DIR/subpki-sshbak $CERTIFIER_DIR/var/pki
     PKIDIR_RESTORED=true
   fi
   if [ -d $CERTIFIER_DIR/var/pki-sshbak ]; then
     mv $CERTIFIER_DIR/var/pki-sshbak $CERTIFIER_DIR/var/pki
     PKIDIR_RESTORED=true
   fi

   case "X$OLD_VERSION" in
   X5.0.0)
   echo
   echo "Upgrading from the current version: this should happen only"
   echo "in Insta internal testing."
   echo
   ;;
   X3.0.0|X3.0.1|X3.0.2|X3.1.0|X3.1.1|X3.2.0|X3.2.1|X3.3.0|X4.0.0|X4.0.1|X4.1.0|X4.2.*|X4.3.0beta|X4.3.0|X4.3.1|X4.3.2|X4.4.*)
   # nop
   ;;
   X2.1.1|X2.1.0|X2.0.92|X2.1.2|X2.99.0)
   # nop
   ;;
   *)
   ;;
   esac
fi

if [ -r $CERTIFIER_DIR/conf/server_conf-sshbak ]; then
  mv $CERTIFIER_DIR/conf/server_conf-sshbak $CERTIFIER_DIR/conf/server.conf
fi
if [ -r $CERTIFIER_DIR/conf/server-insecure_conf-sshbak ]; then
  mv $CERTIFIER_DIR/conf/server-insecure_conf-sshbak \
    $CERTIFIER_DIR/conf/server-insecure.conf
fi

if [ -r lib/certifier_user-sshbak ] ; then
    mv lib/certifier_user-sshbak lib/certifier_user
    CERTIFIER_USER=`cat lib/certifier_user`
else
  echo "Enter username which this Certifier Server is run as."
  echo "(default is $CERTIFIER_USER)"
  printf "Username? "
##############################################################
#
# NSN HAPF modifications done here :
#-------------------------------------------------------------
# removed following lines:
# read cuser
#============================================================
# added following lines
  echo ${cuser}
  shf_logit "set certifier user cuser=${cuser}"
###############################################################

  if [ "X$cuser" != "X" ]; then
    CERTIFIER_USER=$cuser
  fi
fi

if ( echo sync | su $CERTIFIER_USER >/dev/null 2>&1 ) ; then
   CREATE_CERTIFIER_USER=false
else
  cuser_exists=false
  echo "User $CERTIFIER_USER does not exist, shall we create it?"
  printf 'Create user (y/n, default is y)? '
##############################################################
#
# NSN HAPF modifications done here :
#-------------------------------------------------------------
# removed following lines:
# read confirm
#============================================================
# added following lines
CREATE_CERTIFIER_USER=true
###############################################################

  if [ "X$confirm" != "Xy" -a  "X$confirm" != "Xyes" -a "X$confirm" != "X" ]
  then
    echo Please create user $CERTIFIER_USER by hand and rerun this script.
    exit 1
  else
    CREATE_CERTIFIER_USER=true
  fi
fi
##############################################################
#
# NSN HAPF modifications done here :
#-------------------------------------------------------------
# removed following lines:
#
#============================================================
# added following lines
  shf_logit "will create user ${CERTIFIER_USER}: ${CREATE_CERTIFIER_USER}"
###############################################################

TLS_SUBJECT=
PSK=none
if [ -r $CERTIFIER_DIR/conf/server.conf ]; then
  ENGADDR=`$AWK -F \" '/address/ {print $2}' < $CERTIFIER_DIR/conf/server.conf`
  TLS_SUBJECT=`$AWK -F \" '/tls-client-subject-name/ {print $2}' < $CERTIFIER_DIR/conf/server.conf`
else
  ENGADDR="tcp://127.0.0.1:7001/"
fi
##############################################################
#
# NSN HAPF modifications done here :
#-------------------------------------------------------------
# removed following lines:
#if [ "X$TLS_SUBJECT" = "X" ]; then
#  TLS_SUBJECT="CN=Certifier internal TLS client"
#fi
#============================================================
# added following lines
  ENGADDR=${MYTARGET}
  TLS_SUBJECT="CN=`hostname`"
  shf_logit "HAPF overwrote default engine address with: ${MYTARGET}"
  shf_logit "HAPF defined subject name for internal TLS cert to \"CN=`hostname`\""
###############################################################

if [ "X${PKIDIR_RESTORED}" != "Xtrue" -o X${PKIDIR_OBSOLETE} = Xtrue ] ; then

  if [ X${PKIDIR_RESTORED} != Xtrue ]; then
    printf "Using the web administration interface, you "
    if [ X"${NO_COLORS}" = X ]; then
      printf '\033[5;31mmust\033[0m have created a\n'
      printf '\033[5;31mnew server and a pre-shared key\033[0m for that server.\n'
    else
      printf 'must have created a\n'
      printf 'new server and a pre-shared key for that server.\n'
    fi
  else # PKIDIR_OBSOLETE
    echo "You must have upgraded your main Certifier installation before proceeding"
    echo "with this upgrade."
    echo
    printf "Using the web administration interface, you "
    if [ X"${NO_COLORS}" = X ]; then
      printf '\033[5;31mmust\033[0m have created a\n'
      printf '\033[5;31ma new pre-shared key\033[0m for this server.\n'
    else
      printf 'must have created a\n'
      printf 'and a pre-shared key for this server.\n'
    fi
  fi

  echo
  echo "Enter the pre-shared key (_without_ the reference number)"
  echo "(default is $PSK)"
  printf "PSK? "
##############################################################
#
# NSN HAPF modifications done here :
#-------------------------------------------------------------
# removed following lines:
# read psk
#============================================================
# added following lines
  echo ${psk}
  shf_logit "set PSK for enrollment to BE psk=${psk}"
###############################################################

  if [ "X$psk" != "X" ]; then
    PSK=$psk
  fi

  echo "Enter Certifier Engine address (example: tcp://127.0.0.1:7001/)"
  echo "(default is $ENGADDR)"
  printf "Engine address? "
##############################################################
# 
# NSN HAPF modifications done here :
#-------------------------------------------------------------
# removed following lines:
# read eaddr
#============================================================
# added following lines
  echo ${eaddr}
  shf_logit "set engine IP of BE for enrollment to eaddr=${eaddr}"
###############################################################

 if [ "X$eaddr" != "X" ]; then
    ENGADDR=$eaddr
  fi

  echo
  echo "Enter Certifier internal TLS client certificate subject name"
  echo "(default is '$TLS_SUBJECT')"
  echo "(by entering 'hostname' the subject will be 'CN=<hostname>')"
  printf "Subject name: "
##############################################################
#
# NSN HAPF modifications done here :
#-------------------------------------------------------------
# removed following lines:
# read tlssubj
#============================================================
# added following lines
  tlssubj="hostname"
  echo ${tlssubj}
  shf_logit "using \"${tlssubj}\" to build TLS Subject Name"
###############################################################

  if [ "X$tlssubj" == "Xhostname" ]; then
    TLS_SUBJECT="CN="`hostname`
  elif [ "X$tlssubj" != "X" ]; then
    TLS_SUBJECT="$tlssubj"
  fi
  echo "Using TLS subject name '$TLS_SUBJECT'"

  sed -e 's#address "tcp.*$#address "'$ENGADDR'")#' \
    -e 's#tls-client-subject-name ".*"#tls-client-subject-name "'"$TLS_SUBJECT"'"#' \
    <conf/server-conf.dist >conf/server.conf

  sed -e 's#address "tcp.*$#address "'$ENGADDR'")#' \
    -e 's#tls-client-subject-name ".*"#tls-client-subject-name "'"$TLS_SUBJECT"'"#' \
    <conf/server-insecure-conf.dist >conf/server-insecure.conf

  echo Launching server initialization...
  if [ X${PKIDIR_OBSOLETE} = Xtrue ]; then
    rm ./var/pki/*.crt ./var/pki/*.prv >/dev/null 2>&1
  fi
  CERTIFIER_SERVERPASS=${CERTIFIER_SERVERPASS:-""}
  export CERTIFIER_SERVERPASS
  $SSH_CA_SERVER -d 0 -E "$PSK" ./conf/server.conf
  echo Server stopped.
  if [ ! -f ./var/pki/cacomm-client.prv ]; then
    echo Enrollment failed. Exiting.
    exit 100
  fi
else
  if [ $UPGRADE_IN_PROGRESS = "true" ]; then
    echo "Enter Certifier Engine address (example: tcp://127.0.0.1:7001/)"
    echo "(default is $ENGADDR)"
    printf "Engine address? "
##############################################################
#
# NSN HAPF modifications done here :
#-------------------------------------------------------------
# removed following lines:
# read eaddr
#============================================================
# added following lines
  echo ${eaddr}
  shf_logit "set engine IP of BE for enrollment to eaddr=${eaddr}"
###############################################################

    if [ "X$eaddr" != "X" ]; then
      ENGADDR=$eaddr
    fi
  fi

  echo
  echo "Enter Certifier internal TLS client certificate subject name"
  echo "(default is '$TLS_SUBJECT')"
  echo "(by entering 'hostname' the subject will be 'CN=<hostname>')"
  printf "Subject name: "
##############################################################
#
# NSN HAPF modifications done here :
#-------------------------------------------------------------
# removed following lines:
# read tlssubj 
#============================================================
# added following lines
  tlssubj="hostname"
  echo ${tlssubj}
  shf_logit "using \"${tlssubj}\" to build TLS Subject Name"
###############################################################

  if [ "X$tlssubj" == "Xhostname" ]; then
    TLS_SUBJECT="CN="`hostname`
  elif [ "X$tlssubj" != "X" ]; then
    TLS_SUBJECT="$tlssubj"
  fi
  echo "Using TLS subject name '$TLS_SUBJECT'"

  sed -e 's#address "tcp.*$#address "'$ENGADDR'")#' \
    -e 's#tls-client-subject-name ".*"#tls-client-subject-name "'"$TLS_SUBJECT"'"#' \
    <conf/server-conf.dist >conf/server.conf
  sed -e 's#address "tcp.*$#address "'$ENGADDR'")#' \
    -e 's#tls-client-subject-name ".*"#tls-client-subject-name "'"$TLS_SUBJECT"'"#' \
    <conf/server-insecure-conf.dist >conf/server-insecure.conf

fi

#
# Modify the ssh-ca-repair script, otherwise it presumes it is run
# against the main Certifier installation.
#

if [ ! -f $CERTIFIER_DIR/lib/ssh-ca-repair.dist ]; then
  mv $CERTIFIER_DIR/bin/ssh-ca-repair $CERTIFIER_DIR/lib/ssh-ca-repair.dist
fi
cat >$CERTIFIER_DIR/bin/ssh-ca-repair <<EOF
#!/bin/sh
CERTIFIER_DIR=$CERTIFIER_DIR
EOF
chmod 755 $CERTIFIER_DIR/bin/ssh-ca-repair
cat <$CERTIFIER_DIR/lib/ssh-ca-repair.dist  >>$CERTIFIER_DIR/bin/ssh-ca-repair

#
# Create ssh-ca-start script
#
cat <<EOF >ssh-ca-start
#!/bin/sh
umask 077
set +u
unset BASH_ENV
unset ENV

CERTIFIER_DIR=$CERTIFIER_DIR
DEBUG_STRING=0
START_XTERMS=\${START_XTERMS:-false}
SSHSCM_STACK_TRACE=no
SSHSCM_DEBUG_LEVEL=0
SRV=ssh-ca-server
SERVER_CONF=\$CERTIFIER_DIR/conf/server.conf

PATH=$CERTIFIER_DIR/bin:\$PATH:/usr/ucb:/bin:/sbin:/usr/bin:/usr/sbin
export PATH
CERTIFIER_USER=$CERTIFIER_USER
if [ -f  \$CERTIFIER_DIR/lib/certifier_user ]; then
  CERTIFIER_USER=\`cat \$CERTIFIER_DIR/lib/certifier_user\`
fi
export CERTIFIER_USER
FORCE=\${FORCE:-false}

LD_LIBRARY_PATH=$CERTIFIER_DIR/lib:$CERTIFIER_DIR/sybase/lib32:\$LD_LIBRARY_PATH
export LD_LIBRARY_PATH
ODBCINI=$CERTIFIER_DIR/var/odbc.ini
export ODBCINI

RUNIT="./ssh-ca-start exec"

if [  "X\$1" = "Xforce" ]; then
  if [ "X\`whoami\`" != "\$CERTIFIER_USER" ]; then
    echo Forced run as user \`whoami\`. I hope you know what you are doing.
  fi
  FORCE=true
  export FORCE
  shift
fi

if [ \$# -ge 2 -a "X\$1" = "Xexec" ]; then
  shift
  cmd="\$1"
  shift

  case \`whoami\` in
    root)
      if [ "X\$FORCE" = Xtrue  ]; then
        sync
        # fallthru
      elif [ X\$CERTIFIER_USER != Xroot ]; then
        PATH=\$PATH:/bin:/sbin:/usr/sbin:/usr/bin:/usr/local/bin:/usr/local/sbin
        export PATH
        echo eval \$RUNIT "\$cmd" "\$@" | exec su \$CERTIFIER_USER
        exit \$?
      fi
    ;;
    \$CERTIFIER_USER)
      # fallthru
    ;;
    *)
      if [ "X\$FORCE" = Xtrue ]; then
        sync
        # fallthru
      else
        echo Insta Certifier must be run as user \$CERTIFIER_USER.
        exit 1
      fi
  ;;
  esac
  exec "\$cmd" "\$@"
  exit \$?
fi

cd \$CERTIFIER_DIR
while [ \$# != "0" ]; do
  case "\$1" in
    DEBUG)
    shift
    DEBUG_STRING=\$1
    SSHSCM_DEBUG_LEVEL=5
    SSHSCM_STACK_TRACE=yes
    SRV=ssh-ca-server-debug
    ulimit -c unlimited
    ;;
    debug)
    DEBUG_STRING='SshCa*=5'
    SSHSCM_DEBUG_LEVEL=5
    SSHSCM_STACK_TRACE=yes
    SRV=ssh-ca-server-debug
    ulimit -c unlimited
    ;;
    X)
    START_XTERMS=true
    ;;
    force)
    FORCE=true
    ;;
    *) echo Usage: ssh-ca-start [ debug ] [ X ]
    exit 1
    ;;
    esac
    shift
done

export SSHSCM_STACK_TRACE
export SSHSCM_DEBUG_LEVEL
export START_XTERMS

rm \$CERTIFIER_DIR/var/run/*@*.pid  >/dev/null 2>&1 </dev/null

if [ Xtrue = X\$START_XTERMS ]; then
  eval xterm -T Certifier_SubServer -sb -sl 2048 -e \$RUNIT \$CERTIFIER_DIR/bin/\$SRV -d \$DEBUG_STRING \$SERVER_CONF &
else
  eval \$RUNIT \$CERTIFIER_DIR/bin/\$SRV -x -d \$DEBUG_STRING \$SERVER_CONF
fi
EOF

#
# Create ssh-ca-stop script
#
( echo '#!/bin/sh'; echo cd `pwd`/var/run
echo 'PATH=$PATH:/bin:/usr/bin'
echo 'if [ "X" = "X`ls | grep ..\*@..*\\.pid`" ] ; then'
echo '  exit 0'
echo fi
echo 
echo 'for i in `cat *@*.pid`; do'
echo '  kill -QUIT $i'
echo '  sleep 2'
echo done
echo 'rm *@*.pid >/dev/null 2>&1'
echo exit 0 ) > ssh-ca-stop

chmod 550 ssh-ca-start ssh-ca-stop

if [ X"${RELEASE_POSTINSTALL}" != "Xtrue" ] ; then
  echo 
  echo Insta Certifier subordinate server installation complete.
  exit 0
fi

if [ "Xtrue" = "X"$CREATE_CERTIFIER_USER ]; then
  if useradd -g daemon $CERTIFIER_USER; then
     echo User $CERTIFIER_USER created.
     echo $CERTIFIER_USER >$CERTIFIER_DIR/lib/certifier_user
  else
     echo Failed to create user $CERTIFIER_USER
     exit 1
  fi
fi

echo $CERTIFIER_USER >$CERTIFIER_DIR/lib/certifier_user
chmod 644 $CERTIFIER_DIR/lib/certifier_user
chown -R $CERTIFIER_USER $CERTIFIER_DIR/
chgrp -R daemon $CERTIFIER_DIR/

cat >"$CERTIFIER_DIR/lib/ssh-ca-set-startmode" <<EOF
#!/bin/sh
case "\$1" in
auto)
 "$CERTIFIER_DIR/lib/ssh-ca-initd-tool" uninstall 78 78 certifsub
 "$CERTIFIER_DIR/lib/ssh-ca-initd-tool" install 78 78 certifsub "Insta Certifier $NEW_VERSION" "Insta Certifier subordinate server" "$CERTIFIER_DIR/ssh-ca-start" "$CERTIFIER_DIR/ssh-ca-stop"
;;
manual)
  "$CERTIFIER_DIR/lib/ssh-ca-initd-tool" uninstall 78 78 certifsub
;;
*)
  echo 'Usage: ssh-ca-set-startmode auto|manual'
  exit 1
;;
esac
EOF
chmod 755 "$CERTIFIER_DIR/lib/ssh-ca-set-startmode"
$CERTIFIER_DIR/lib/ssh-ca-set-startmode auto
if [ $? = 0 ]; then
    RCSETUP=true
else
    RCSETUP=false
fi

echo
echo Certifier subordinate server will syslog to facility local1.
echo

TMPSLC=$CERTIFIER_DIR/var/syslogconf.inc
SYSLOG_CONF=/etc/syslog.conf
if [ ! -f $SYSLOG_CONF ]; then
  SYSLOG_CONF=/etc/rsyslog.conf
fi

if [ -f $TMPSLC ]; then
  echo "Your syslog configuration in $SYSLOG_CONF was not modified."
  if [ -d $CERTIFIER_DIR/log-sshbak ]; then
     if [ -d $CERTIFIER_DIR/var/log ] ; then
        rm -rf $CERTIFIER_DIR/var/log
     fi
     mv $CERTIFIER_DIR/log-sshbak $CERTIFIER_DIR/var/log
  fi
else
  if [ -w $SYSLOG_CONF ] ; then
    cat <<EOF >$TMPSLC
# Syslog configuration for Insta Certifier subserver installation BEGIN
local1.debug				$CERTIFIER_DIR/var/log/server.log
# Syslog configuration for Insta Certifier subserver installation END
EOF

    $CERTIFIER_DIR/lib/ssh-ca-syslogconf-tool -c '^local[1]' $TMPSLC
    if [ $? = 0 ]; then
      if [ -d $CERTIFIER_DIR/log-sshbak ]; then
        if [ -d $CERTIFIER_DIR/var/log ] ; then
           rm -rf $CERTIFIER_DIR/var/log
        fi
        mv $CERTIFIER_DIR/log-sshbak $CERTIFIER_DIR/var/log
      else
        mkdir $CERTIFIER_DIR/var/log
        # Label the directory for SELinux if needed
        if [ $SELINUX_STATUS = "enabled" ] ; then
          chcon -t var_log_t $CERTIFIER_DIR/var/log
        fi
      fi
      touch $CERTIFIER_DIR/var/log/server.log
      chmod 600 $CERTIFIER_DIR/var/log/server.log
##############################################################
#
# NSN HAPF modifications done here :
#-------------------------------------------------------------
# removed following lines:
# $CERTIFIER_DIR/lib/ssh-ca-syslogconf-tool -s '^local[1]' $TMPSLC  
#============================================================
# added following lines
$CERTIFIER_DIR/lib/ssh-ca-syslogconf-tool -s '^local[1]' $TMPSLC <<EOSLG
y
EOSLG
#
###############################################################


    else
      echo Your syslog configuration file was not automatically updated. It seems that
      echo your syslog configuration already contains rules for syslog facilities which
      echo are used by Certifier. Please check that your $SYSLOG_CONF directs
      echo facility local1 to some reasonable place.
      echo If your system already uses syslog facility local1 for some
      echo other purpose, you must edit file conf/server.conf to configure Certifier
      echo to use some other syslog facility.
      if [ -d $CERTIFIER_DIR/log-sshbak ]; then
        if [ -d $CERTIFIER_DIR/var/log ] ; then
           rm -rf $CERTIFIER_DIR/var/log
        fi
        mv $CERTIFIER_DIR/log-sshbak $CERTIFIER_DIR/var/log
      fi
      rm $TMPSLC
    fi
  else
    echo Your syslog configuration file was not automatically updated due to
    echo insufficient privileges.
  fi
fi

case "X$OLD_VERSION" in
  X|Xnone)
  echo By default the server will not run any services. Please configure your
  echo new server with the Administration Service running on your main
  echo Certifier installation.
  echo
  echo Insta Certifier subordinate server installation complete.
  ;;
  *)
  echo
  echo Insta Certifier subordinate server upgrade complete.
  ;;
esac

if [ "X$RCSETUP" != Xfalse ] ; then
  echo 'This Certifier server will start automatically at system boot (runlevel 2).'
else
  echo 'Certifier subordinate server will _NOT_ start automatically at system boot.'
fi
echo
echo Please run $CERTIFIER_DIR/ssh-ca-start to start Certifier Server now.
#
shf_logit "leaving Insta setup routine ssh-ca-setup for FE role"
shf_logit "#--------------------------------------------------------------------------"
