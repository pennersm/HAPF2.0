#!/bin/sh
# Declarations generated by RPM postinstall script
LINUX_INSTALL=true
CERTIFIER_DIR=/usr/local/certifier
MY_NAME=certifier
MY_LONG_NAME="Insta Certifier"
cd /usr/local/certifier

INSTALL_SYBASE=true
INIT_DATABASE=true
DSN='DSN=certifier'
# End of declarations generated by RPM postinstall script
############################################################################
# NSN INSTA HAPF2.0 RAPID SETUP CONFIG
#--------------------------------------------------------------------------
# Script default name   : ~script/config_insta.sh
# Configure version     : mkks62g.pl
# Media set             : PF21I52RH64-12
# File generated        : 19.07.2013 MPe
#
###########################################################################
#
#   This script is called by config_insta.sh
#
shf_logit "#--------------------------------------------------------------------------"
shf_logit " entering Insta setup routine ssh-ca-setup for BE role"
export -p SHELLOG=${INSTDIR}/config_insta.sh.${ROLE}.${NOW}.shell.log
MYSELF="config_insta.sh-ssh-ca-setup"
#--------------------------------------------------------------------------
# either inherited or defaulted
ROLE="$1"
shf_set_index
SNMPENA[$X]="$2"
: ${CUSER:="certfier"}
: ${SNMPENA[$X]:="yes"}
: ${SNMPUSER:="certifier"}
: ${SNMPV3PASSPHRASE[$X]:="certifier_passphrase"}
if [ ! -z "${ROLE}" ] ; then
	[ "${ROLE}" = "be1" ]          && RANDEV="/dev/null" 
	[ "${ROLE}" = "be2" ]          && RANDEV="/dev/random" 
	[ "${ROLE}" = "SingleServer" ] && RANDEV="/dev/random"
	else
	RANDEV="/dev/random"
fi
# --- this programs variables ---------------
efile=${RANDEV}
cuser=${CUSER}
[ "${SNMPV3CONV[$X]}" = "yes" ] && SNMPTRAPRCVIP[$X]="127.0.0.1"
snmp_user=${SNMPUSER}
: ${SNMP_PASSWORD:="${SNMPV3PASSPHRASE[$X]}"}
shf_logit "using configure index $X, will define SNMP_ENABLE to \"${SNMPENA[$X]}\""
shf_logit "using SNMP cleartext passphrase \"${SNMPV3PASSPHRASE[$X]}\""
shf_logit "inherited encrypted passphrase \"${ICSNMPPASS}\""
shf_logit "will use snmp passphrase as \"${SNMP_PASSWORD}\""
shf_logit "will use \"${RANDEV}\" if not bypassed by shf_fast_entropy"
#------------------------------------------------------------------------
if ! rpm -q "certifier" &>/dev/null ; then
        shf_logit "package certifier is not installed and hence I wont go anywhere from here!"
        return 5
fi

if ! ls $CERTIFIER_DIR/sybase/sqlanywhere12.tar.gz &>/dev/null; then
        shf_logit "no archive to install sybase, this seems no clean install, i am bailing out!"
        return 5
fi
#------------------------------------------------------------------------
alias rm='rm -f'
alias mv='mv -f'
alias cp='cp -f'
shf_logit "disabling boring precautions: `alias mv;` `alias rm;` `alias cp`"

##########################################################################
#!/bin/sh
#
# ssh-ca-main-setup
#
# Copyright (c) 2009 Insta DefSec Oy
#               All rights reserved
#

umask 077
DBENG=dbeng12
DBODBC=libdbodbc12
MY_PAGER=${PAGER:-"more"}
CERTIFIER_USER=${CERTIFIER_USER:-"certfier"}
CERTIFIER_DIR=${CERTIFIER_DIR:-"`pwd`"}
SYBASE_DIR=/opt/sqlanywhere12
SYBASE_DIR_BIN=$SYBASE_DIR/bin64
SYBASE_DIR_LIB=$SYBASE_DIR/lib64
SYBASE_DATABASE_NAME=certifier
SYBASE_SERVER_NAME=certdbeng
RANDOMIZE_DBA_PWD=true
DSN=${DSN:-"DSN=certifier"}
export DSN
CREATE_ENP=true

TLSCA_SUBJECT_NAME=${TLSCA_SUBJECT_NAME:-"O=Certifier Internal,CN=Certifier TLS issuer"}

KEYTYPE=${KEYTYPE:-"if-modn"}
SIGNATURE_ALGORITHM=${SIGNATURE_ALGORITHM:-"rsa-pkcs1-sha1"}
ENCRYPTION_ALGORITHM=${ENCRYPTION_ALGORITHM:-"rsa-pkcs1-none"}
TLSCA_KEYLEN=${TLSCA_KEYLEN:-"2048"}

TLSCA_VALIDITY_YEARS=${TLSCA_VALIDITY_YEARS:-"2"}
MY_NAME=${MY_NAME:-"certifier"}

if [ "Xtrue" = "X$SOLARIS_INSTALL" ]; then
  CERTIFIER_DIR=${PKG_INSTALL_ROOT}${CERTIFIER_DIR}
  SYBASE_DIR_BIN=$SYBASE_DIR/bin64
  SYBASE_DIR_LIB=$SYBASE_DIR/lib64
fi


# Check if SELinux is enabled
SELINUX_STATUS=disabled
if sestatus > /dev/null ; then
  SELINUX_STATUS=`sestatus |grep "SELinux status:" | awk '{print $3}'`
fi 2>/dev/null

# Check if another Sybase database engine is running
if [ X$SSH_CA_ANOTHER_DBENG_IS_OK != Xtrue ] ; then
  if [ X`uname` = XLinux -o X`uname` = XNetBSD ]; then
    PSOPTS="xa"
  else
    PSOPTS="-edaf"
  fi
  ps $PSOPTS | grep dbeng | grep -v grep >/dev/null && \
    printf "A Sybase engine is already running on this host. " && \
    echo " Refusing to install." && \
    printf "Set environment variable SSH_CA_ANOTHER_DBENG_IS_OK " && \
    echo "to \"true\" (without " && printf "the parenthesis) " && \
    echo "to override."  && exit 3

  ps $PSOPTS | fgrep ssh-ca-engine | grep -v grep >/dev/null && \
    printf "A Certifier engine is already running on this host. " && \
    echo " Refusing to install." && \
    printf "Set environment variable SSH_CA_ANOTHER_DBENG_IS_OK " && \
    echo "to \"true\" (without " && printf "the parenthesis) " && \
    echo "to override."  && exit 3
fi

#if [ -d $CERTIFIER_DIR/var/migration ]; then
#  echo "A migrated installation detected. Restoring... "
#  cd $CERTIFIER_DIR
#  ./bin/ssh-ca-backup -restore-for-upgrade -dest-root ./var/migration
#  if [ $? != 0 ]; then
#    echo Restoring a migration backup failed.
#    exit 22
#  fi
#  echo Migration successful.
#fi

##############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# removed following lines:
#
#if [ $# -gt 0 ]; then
#  echo "Upgrading from backup file $1"
#  $CERTIFIER_DIR/bin/ssh-ca-backup -restore-for-upgrade -bak-file $1
#  cd $CERTIFIER_DIR
#fi
#============================================================
# added following lines
  shf_logit "ability for updates from backup is disabled, HAPF does install only"
###############################################################

UPGRADE_IN_PROGRESS=false
if [ -r  $CERTIFIER_DIR/var/upgrade_in_progress ]; then
  echo "We are upgrading from an existing Certifier installation. "
  echo "Your existing database will be preserved."
  UPGRADE_IN_PROGRESS=true
fi

ADMIN_OPERATOR_NAME=admin


# Entropy and license stuff

ENTROPY_INJECTED=false
ENTROPY_SOURCE=none
if [ -c /dev/null ]; then
  ENTROPY_SOURCE=/dev/null
fi
if [ -c /dev/random ]; then
##############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# removed following lines:
# ENTROPY_SOURCE=/dev/random
#============================================================
# added following lines
ENTROPY_SOURCE=${RANDEV}
shf_logit "using \"${ENTROPY_SOURCE}\" to collect entropy"
###############################################################
fi

if [ -r $CERTIFIER_DIR/var/upgrade_in_progress -o \
     -r $CERTIFIER_DIR/var-sshbak/upgrade_in_progress ]; then
  ENTROPY_SOURCE=none
fi
if [ -r ${CERTIFIER_DIR}/lib/license.txt ]; then
  cat <<EOF

This program will finalize the installation of 
${MY_LONG_NAME} on your computer.

This software is protected by copyright law and international treaties.

Unauthorized reproduction or distribution of this program, or any portion of 
it, may result in severe civil and criminal penalties, and will be prosecuted 
to the maximum extent possible under law.

Read license conditions from ${CERTIFIER_DIR}/lib/license.txt.

Press ENTER to continue.
EOF
###############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# removed following lines:
#  read ignore
#============================================================
# added following lines
  cat ${CERTIFIER_DIR}/lib/license.txt &>> ${SHELLOG}
  shf_logit "make sure you read and acknowledge the EULA  ${CERTIFIER_DIR}/lib/license.txt !"
###############################################################
fi

if [ -r  $CERTIFIER_DIR/var/upgrade_in_progress -o \
     -r $CERTIFIER_DIR/var-sshbak/upgrade_in_progress ]; then
  ENTROPY_SOURCE=none
else
  echo
  echo "Enter filename used as initial source for randomness."
  echo "(default is $ENTROPY_SOURCE)"
  printf "Entropy file? "

##############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# removed following lines:
#  read efile 
#============================================================
# added following lines
# 
###############################################################

  if [ "X$efile" != "X" ]; then
    ENTROPY_SOURCE=$efile
  fi
fi
##############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# removed following lines:
#
#============================================================
# added following lines
  echo ${ENTROPY_SOURCE}
  shf_logit "set entropy file=`echo ${ENTROPY_SOURCE}`"
###############################################################

if [ $ENTROPY_SOURCE != "none" ]; then
   # If entropy source is s character special file (like /dev/random),
   # extract 1k of randomness to a temp file
  if [ -c $ENTROPY_SOURCE ]; then
    echo "Warning: we are fetching lots of randomness, this may take several minutes."
    dd if=$ENTROPY_SOURCE of=/tmp/entropy.$$ bs=1 count=1024 >/dev/null 2>&1
    if [ "0" = $? ]; then
      ENTROPY_SOURCE=/tmp/entropy.$$
      DELETE_ENTROPY_SOURCE=please
    else
      echo "WARNING: unable to use $ENTROPY_SOURCE as source for randomness."
      ENTROPY_SOURCE="none"
    fi
  fi
fi

PATH=$PATH:/usr/sbin:/usr/ucb
if [ $ENTROPY_SOURCE = "none" ]; then
  echo "Gathering some low quality randomness from the system..."
  ENTROPY_SOURCE=/tmp/entropy.$$
  DELETE_ENTROPY_SOURCE=please
  # Better than nothing. Please note that this is not the only source of
  # entropy fed to the random generator before key generation.
 ( netstat -a 2>&1 ; netstat -i 2>&1 ; who 2>&1 ; netstat -nr 2>&1; arp -a 2>&1 ; ps -al 2>&1 ; date; id; ls -lau / . /tmp /etc /dev ; ls -la / . /tmp /etc ; df 2>&1; vmstat 2>&1 ;  cat /proc/interrupts 2>&1 ; vmstat -i 2>&1 ; vmstat -s 2>&1 ; vmstat -f 2>&1 ; cat /proc/stat 2>&1 ; uptime ; dmesg 2>&1 )  >$ENTROPY_SOURCE
fi


# Certifier user account

if [ -r lib/certifier_user-sshbak ] ; then
   mv lib/certifier_user-sshbak lib/certifier_user
fi
if [ -r lib/certifier_user ] ; then
    CERTIFIER_USER=`cat lib/certifier_user`
else
  if [ X`whoami` != X$CERTIFIER_USER  -a X`whoami` != Xroot ]; then
    CERTIFIER_USER=`whoami`
  fi
  echo "Enter username which Certifier is run as."
  echo "(default is $CERTIFIER_USER)"
  printf "Username? "
##############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# removed following lines:
# read cuser
#============================================================
# added following lines
  echo ${cuser}
  shf_logit "set certifier user cuser=${cuser}"
###############################################################

  if [ "X$cuser" != "X" ]; then
    CERTIFIER_USER=$cuser
  fi
fi

if ( [ X`whoami` = X$CERTIFIER_USER ] || echo sync | su $CERTIFIER_USER >/dev/null 2>&1 ) ; then
   CREATE_CERTIFIER_USER=false
else
  cuser_exists=false
  echo "User $CERTIFIER_USER does not exist, shall we create it?"
  printf 'Create user (y/n, default is y)? '

##############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# removed following lines:
# read confirm 
#============================================================
# added following lines
  confirm="y"
###############################################################

  if [ "X$confirm" != "Xy" -a  "X$confirm" != "Xyes" -a "X$confirm" != "X" ]
  then
    echo Please create user $CERTIFIER_USER and rerun this script.
    if [ ${DELETE_ENTROPY_SOURCE:-X} != X ]; then
      rm $ENTROPY_SOURCE
    fi
    exit 1
  else
    CREATE_CERTIFIER_USER=true
  fi
fi
##############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# removed following lines:
#
#============================================================
# added following lines
  shf_logit "will create user ${CERTIFIER_USER}: ${CREATE_CERTIFIER_USER}"
###############################################################


password_query()
{
  password_ok=false
  while [ $password_ok = false ]
  do
    echo
    echo -n "$1 "
    stty -echo
    read password
    stty echo
    echo
    pwd_len=`echo $password | wc -c`
    pwd_words=`echo $password | wc -w`
    if [ $pwd_len -lt 9 -o $pwd_words -gt 1 ]; then
      echo "Invalid password, please enter password again."
    else
      password_ok=true
    fi
  done
  if [ $# -gt 1 -a "$2"="true" ]; then
    password=`echo -n $password | $CERTIFIER_DIR/bin/ssh-encrypt -E -s -x -c aes-cbc`
  fi
}

#
# SNMP?
#

SETUP_SNMP=true
if [ -e ./conf/engine.conf ]; then
  if [ -r ./var/upgrade_in_progress -a `grep -c "(snmp" ./conf/engine.conf` -gt 0 ]; then
    SETUP_SNMP=false
    SNMP_ENABLED=false
    if [ `grep -c "(snmp (enabled \"true\"" ./conf/engine.conf` -gt 0 ]; then
      SNMP_ENABLED=true
    fi
  fi
fi

if [ X$SETUP_SNMP = Xtrue ]; then
  echo
  echo -n "Enable SNMP (y/n, default is y)? "
##############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# removed following lines:
# read confirm
#============================================================
# added following lines
  confirm="${SNMPENA[$X]}"
  echo ${confirm}
###############################################################
#
  if [ "X$confirm" = "Xy" -o  "X$confirm" = "Xyes" -o "X$confirm" = "X" ]
  then
    SNMP_ENABLED=true
  else
    SNMP_ENABLED=false
  fi
##############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# removed following lines:
#
#============================================================
# added following lines
  shf_logit "set SNMP enable to ${SNMP_ENABLED}"
###############################################################

  #
  # SNMP user account for trap sending
  #
#  SNMP_ADDRESS=127.0.0.1
#  SNMP_USER=certifier
#  SNMP_PASSWORD=
  if [ "X$SNMP_ENABLED" = "Xtrue" ]; then
    echo
    echo "Enter SNMP manager IP address. Traps will be sent to this address."
    echo -n "Address (default $SNMP_ADDRESS): "
##############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# removed following lines:
# read snmp_addr
#============================================================
# added following lines
  snmp_addr=${SNMPTRAPRCVIP[$X]}
  echo ${snmp_addr}
  shf_fshow echo ${snmp_addr}
  shf_logit "set trap receiver IP to ${snmp_addr}"
###############################################################

    if [ "X$snmp_addr" != "X" ]; then
      SNMP_ADDRESS=$snmp_addr
    fi
    echo
    echo "Configuring SNMP v3 credentials for sending traps to the SNMP manager."
    echo -n "Enter SNMP security name (default $SNMP_USER): "
##############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# removed following lines:
#
#    read snmp_user
#    if [ "X$snmp_user" != "X" ]; then
      SNMP_USER=$snmp_user
#    fi
#    password_query "Enter SNMP security passphrase (at least 8 characters):" true
#    SNMP_PASSWORD=$password
#============================================================
# added following lines
# SNMP_USER="${SNMPUSER}"
# SNMP_PASSWORD="${ICPASSPHRASE}"
 printf "\n"
 shf_logit "set SNMPv3 USM user \"${SNMP_USER}\" pass \"${SNMP_PASSWORD}\""
###############################################################

  fi
fi

#
if [ "X$HPUX_INSTALL" = "Xtrue" ]; then
  SHLIB_PATH=$CERTIFIER_DIR/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib
  export SHLIB_PATH
else
  LD_LIBRARY_PATH=$CERTIFIER_DIR/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib
  export LD_LIBRARY_PATH
fi

cd $CERTIFIER_DIR
NEW_VERSION="`./bin/ssh-ca-server -v`"
if [ -r ./var/upgrade_in_progress ]; then
  RANDOMIZE_DBA_PWD=false
  OLD_VERSION=`cat ./var/upgrade_in_progress`
  echo "`date`: $OLD_VERSION to $NEW_VERSION" >>./var/upgrade_history
  rm ./var/upgrade_in_progress
  if [ -x ./var/post-postinstall ]; then
     ./var/post-postinstall
  rm ./var/post-postinstall
  fi
fi
if [ -r ./ssh-ca-upgrade ]; then
  mv ./ssh-ca-upgrade ./ssh-ca-setup
fi
if [ -r ssh-ca-stop ]; then ./ssh-ca-stop; fi
SSH_CA_TOOL=`pwd`/bin/ssh-ca-tool
SSH_CA_ENGINE=`pwd`/bin/ssh-ca-engine
SSH_CA_ENGINECTL=`pwd`/bin/ssh-ca-enginectl
SSH_CA_SERVER=`pwd`/bin/ssh-ca-server


#
# Create bin/ssh-ca-env script
#
cat <<EOF >./bin/ssh-ca-env
#!/bin/sh
umask 077
set +u
unset BASH_ENV
unset ENV

if [ "X\$SSH_CA_GET_DBCONN" = "Xtrue" ] ; then
  # This is bash bug avoidance
  ssh_ca_get_dbconn=true
fi

CERTIFIER_DIR=$CERTIFIER_DIR
export CERTIFIER_DIR
CERTIFIER_USER=$CERTIFIER_USER
if [ -f  \$CERTIFIER_DIR/lib/certifier_user ]; then
  CERTIFIER_USER=\`cat \$CERTIFIER_DIR/lib/certifier_user\`
fi
export CERTIFIER_USER
EOF

if [ "X$SOLARIS_INSTALL" = "Xtrue" ]; then
  cat <<EOF >>./bin/ssh-ca-env
PATH=$PATH:/usr/ucb
export PATH
EOF
fi

if [ "X$HPUX_INSTALL" = "Xtrue" ]; then
  cat <<EOFHPUX >>./bin/ssh-ca-env
SHLIB_PATH=$CERTIFIER_DIR/lib:\$SHLIB_PATH
export SHLIB_PATH
EOFHPUX
else
  cat <<EOF >>./bin/ssh-ca-env
LD_LIBRARY_PATH=$CERTIFIER_DIR/lib:\$LD_LIBRARY_PATH
export LD_LIBRARY_PATH
EOF
fi

if [ "X"$INSTALL_SYBASE = "Xtrue" ] ; then
  cat <<EOF
. /opt/sqlanywhere12/bin64/sa_config.sh
ODBCINI=\$CERTIFIER_DIR/var/odbc.ini
export ODBCINI
if [ ! -r \$ODBCINI ]; then
   echo \$ODBCINI is not readable.
   exit 1
fi
if [ "X\$ssh_ca_get_dbconn" = "Xtrue" ] ; then
  CERTIFIER_DBCONN="\`( tail -4 \$ODBCINI | tr \\\\\\012 \\\\\\073 ;echo ) | sed -ne 's/;\$//gp' \` " || echo Failed to parse \$ODBCINI
  echo \$CERTIFIER_DBCONN | grep EngineName >/dev/null 2>&1 || CERTIFIER_DBCONN="EngineName=check_your_odbcini"
  export CERTIFIER_DBCONN
fi
CERTIFIER_BACKUP_CRON_USER=""
export CERTIFIER_BACKUP_CRON_USER
CERTIFIER_BACKUP_CRON_PERIOD=none
export CERTIFIER_BACKUP_CRON_PERIOD
CERTIFIER_BACKUP_ROOT=\$CERTIFIER_DIR/var/bak
export CERTIFIER_BACKUP_ROOT
DBENG=\${DBENG:-"$DBENG"}
export DBENG
CERTIFIER_DBDIR=\$CERTIFIER_DIR/sybase
CERTIFIER_DB=\$CERTIFIER_DBDIR/certifier.db
CERTIFIER_DBLOG_MAIN=\$CERTIFIER_DBDIR/certifier.log
CERTIFIER_DBLOG_MIRRORS=
export CERTIFIER_DBDIR
export CERTIFIER_DB
export CERTIFIER_DBLOG_MAIN
export CERTIFIER_DBLOG_MIRRORS
EOF
fi >>./bin/ssh-ca-env

cat <<EOF >>./bin/ssh-ca-env
exec_as_certifier_user()
{
  cmd="\$@"
  case \`whoami\` in
    root)
      if [ X\$CERTIFIER_USER != Xroot ]; then
EOF
if [ "X$SOLARIS_INSTALL" = "Xtrue" ]; then
cat << EOF >>./bin/ssh-ca-env
        eval su $CERTIFIER_USER -c "\"\$cmd\""
EOF
else
cat << EOF >>./bin/ssh-ca-env
        eval su -c "\"\$cmd\"" \$CERTIFIER_USER
EOF
fi
cat << EOF >>./bin/ssh-ca-env
        return \$?
      fi
    ;;
    \$CERTIFIER_USER)
      eval \$cmd
      return $?
    ;;
    *)
      echo Insta Certifier must be run as user \$CERTIFIER_USER.
      return 1
  ;;
  esac
}
EOF

chmod 750 ./bin/ssh-ca-env
chown bin ./bin/ssh-ca-env
chgrp bin ./bin/ssh-ca-env


if [ "X"$INSTALL_SYBASE = "Xtrue" ] ; then
  export CERTIFIER_DIR
  echo Installing Sybase SQL Anywhere 12 to /opt/sqlanywhere12
  shf_logit "start Installing Sybase SQL Anywhere 12 to /opt/sqlanywhere12"
  if [ "Xtrue" = "X$SOLARIS_INSTALL" ]; then
    gunzip $CERTIFIER_DIR/sybase/sqlanywhere12.tar.gz
    cd /opt
    tar -xf $CERTIFIER_DIR/sybase/sqlanywhere12.tar
    cd $CERTIFIER_DIR
    rm -r $CERTIFIER_DIR/sybase/sqlanywhere12.tar
  else
    tar -xzf $CERTIFIER_DIR/sybase/sqlanywhere12.tar.gz -C /opt
    rm -r $CERTIFIER_DIR/sybase/sqlanywhere12.tar.gz
  fi
  chmod 640 $CERTIFIER_DIR/sybase/authenticate.sql 
  cp $CERTIFIER_DIR/sybase/authenticate.sql /opt/sqlanywhere12/scripts/
  # Label the stuff for SELinux if needed
  if [ $SELINUX_STATUS = "enabled" ] ; then
    chcon -t texrel_shlib_t -R /opt/sqlanywhere12/
  fi
	shf_logit "will now source \"$SYBASE_DIR_BIN/sa_config.sh\""
  # Read sa_config.sh
  . $SYBASE_DIR_BIN/sa_config.sh
	rc=$?
	shf_logit "returned from \"$SYBASE_DIR_BIN/sa_config.sh\" with exit \"$rc\""
  ODBCINI=${CERTIFIER_DIR}/var/odbc.ini
  export ODBCINI
  DBPASS=sql

  #
  # Create a temporary odbc.ini
  #
  shf_logit "creating a temporary odbc.ini"
  if [ -r "${CERTIFIER_DIR}/odbc.ini-sshbak" ]; then
    # We are upgrading and the old odbc.ini is available
    <"${CERTIFIER_DIR}/odbc.ini-sshbak" >"$ODBCINI" sed \
        -e 's/dbodbc7/dbodbc8/g' \
        -e 's/dbodbc8/libdbodbc11/g' \
        -e 's/libdbodbc11/libdbodbc12/g' \
        -e 's#sybase/lib/#sybase/lib64/#g' \
        -e 's#sybase/lib32#sybase/lib64#g' \
        -e 's#/opt/sqlanywhere11/lib32#/opt/sqlanywhere12/lib64#g' \
        -e 's#'"${CERTIFIER_DIR}"'/sybase/lib#/opt/sqlanywhere12/lib#g' \
        -e 's#/usr/local/certifier#'"${CERTIFIER_DIR}"'#g' \
        -e 's#/opt/certifier#'"${CERTIFIER_DIR}"'#g'
    rm "${CERTIFIER_DIR}/odbc.ini-sshbak"
    DBPASS=`grep PWD $ODBCINI | sed -e 's/PWD=//'`
  else
    echo "["$DSN"]" | sed -e 's/DSN=//g' >$ODBCINI
    echo 'Driver='${SYBASE_DIR_LIB}/${DBODBC}.so.1  >>$ODBCINI
    cat >>$ODBCINI <<EOF
UID=DBA
PWD=$DBPASS
DatabaseName=$SYBASE_DATABASE_NAME
EngineName=$SYBASE_SERVER_NAME
EOF
  fi
  chmod 600 ${ODBCINI}

  #
  # Start the database
  #
  shf_logit "starting the database"
  cd $CERTIFIER_DIR/sybase
  if [ -r certifier.db -o -r certifier.db-sshbak ] ; then
    echo Using existing Certifier database.
    INIT_DATABASE=false
   shf_logit "database initialization INIT_DATABASE=\"$INIT_DATABASE\""
    if [ ! -r certifier.db ] ; then
      mv certifier.db-sshbak certifier.db
      mv certifier.log-sshbak certifier.log
    fi
    case "X$OLD_VERSION" in
      X3.*|X4.0.*)
      cd $CERTIFIER_DIR
      ./lib/ssh-ca-dbupgrade
      if [ $? != 0 ]; then
        echo Failed to upgrade database, exiting
        exit 5
      fi
      cd $CERTIFIER_DIR/sybase
    esac
  else
     echo Creating Certifier database.
 	shf_logit "will now run dbinit command"
    dbinit -i -z ISO9LATIN1 certifier
 	rc=$?
shf_logit "dbinit exited with status \"$rc\""
  fi
  sync
  chmod go-rwx certifier.db
  if [ -f certifier.log ]; then
    chmod go-rwx certifier.log
  fi
  shf_logit "will now run dbspawn command"
  dbspawn $DBENG -n $SYBASE_SERVER_NAME -s local0 certifier.db
	rc=$?
	shf_logit "dbspawn exited with status \"$rc\""
fi

#
# Configuration files
#
cd $CERTIFIER_DIR

shf_logit "start handling snmp config for new engine.conf"
if [ X$SETUP_SNMP = Xtrue ]; then
  sed -e 's#data-source-name ".*$#data-source-name "'$DSN'")#' \
      -e "s/SNMP_ENABLED/$SNMP_ENABLED/g" \
      -e "s/SNMP_MANAGER_ADDRESS/$SNMP_ADDRESS/g" \
      -e "s/SNMP_SECURITY_NAME/$SNMP_USER/g" \
      -e "s/SNMP_SECURITY_PASSPHRASE/$SNMP_PASSWORD/g" \
      <conf/engine-conf.dist >conf/engine.conf
else
  # take data-source-name
  old_dsn=`grep "(data-source-name" conf/engine.conf | sed -e 's/.*(data-source-name "//' -e 's/")//'`
  if [ `echo "$old_dsn"|grep "ENP="|wc -l` -ne 0 ]; then
    DSN=$old_dsn
    CREATE_ENP=false
  fi

  # copy previous SNMP config
  hlines=`grep -n "(snmp" conf/engine-conf.dist | sed s/:.*//`
  hlines=`expr $hlines - 1`
  lines=`wc -l < conf/engine-conf.dist`
  slines=`grep -A15 "(snmp" conf/engine.conf|grep -B15 "))"|wc -l`
  slines2=`expr $slines - 1`
  tlines=`expr $lines - $hlines - $slines`
  head -n $hlines conf/engine-conf.dist | \
      sed -e 's#data-source-name ".*$#data-source-name "'$DSN'")#' \
      >> conf/engine-conf.tmp
  grep -A $slines2 "(snmp" conf/engine.conf|sed 's/))/)/' >> conf/engine-conf.tmp

  # take previous engine-id
  if [ `grep "(engine-id " conf/engine.conf|wc -l` -ne 0 ]; then
    echo "Saving previous SNMP engine-id."
    tail -n $tlines conf/engine-conf.dist|grep -v "(engine-id " >> conf/engine-conf.tmp
  else
    tail -n $tlines conf/engine-conf.dist >> conf/engine-conf.tmp
  fi

  mv conf/engine-conf.tmp conf/engine.conf
  rm -f conf/engine-conf.tmp
fi
shf_logit "snmp config for new engine.conf done"
sed -e 's#data-source-name ".*$#data-source-name "'$DSN'")#' <conf/engine-insecure-conf.dist >conf/engine-insecure.conf
shf_logit "handling internal TLS cert subject name"
if [ -r $CERTIFIER_DIR/conf/server.conf ]; then
  TLS_SUBJECT=`$AWK -F \" '/tls-client-subject-name/ {print $2}' < $CERTIFIER_DIR/conf/server.conf`
fi
if [ "X$TLS_SUBJECT" = "X" ]; then
  TLS_SUBJECT="CN=Certifier internal TLS client"
fi

echo
echo "Enter Certifier internal TLS client certificate subject name"
echo "(default is '$TLS_SUBJECT')"
echo "(by entering 'hostname' the subject will be 'CN=<hostname>')"
printf "Subject name: "
##############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# removed following lines:
# read tlssubj
# if [ "X$tlssubj" == "Xhostname" ]; then
  TLS_SUBJECT="CN="`hostname`
#elif [ "X$tlssubj" != "X" ]; then
#  TLS_SUBJECT="$tlssubj"
#fi
#============================================================
# added following lines
  shf_logit "using \"CN=`hostname`\" as subject name for internal TLS certificate"
###############################################################


echo "Using TLS subject name '$TLS_SUBJECT'"

sed -e 's#tls-client-subject-name ".*"#tls-client-subject-name "'"$TLS_SUBJECT"'"#' \
  <conf/server-conf.dist >conf/server.conf
sed -e 's#tls-client-subject-name ".*"#tls-client-subject-name "'"$TLS_SUBJECT"'"#' \
  <conf/server-insecure-conf.dist >conf/server-insecure.conf

NOT_BEFORE=`date -u '+%Y/%m/%d %H:%M:%S'`
NOT_AFTER_TAIL=`date -u '+%m/%d %H:%M:%S'`
YEAR_NOW=`date -u +%Y`
TLSCA_YEAR_THEN=`expr $YEAR_NOW + $TLSCA_VALIDITY_YEARS`
TLSCA_NOT_AFTER="$TLSCA_YEAR_THEN/$NOT_AFTER_TAIL"
shf_logit "TLS subject name configured for new cert"
#
# Initialize database
#
if [ X"$INIT_DATABASE" != Xfalse ]; then
  echo Clearing the Certifier database...
shf_logit "Clearing the Certifier database..."
  # Delete everything in the DB
  echo yes | $SSH_CA_TOOL $DSN -d >/tmp/failure.$$ 2>&1 
  if [ $? != 0 ]; then
    echo Database initialization failed. Check database status and ODBC configuration.
	shf_logit "ERROR: database initialization failed"
    cat /tmp/failure.$$
    rm /tmp/failure.$$
    dbstop $SYBASE_SERVER_NAME
    exit 5
  fi

  rm /tmp/failure.$$

  # Create tables and indexes
  shf_logit "Initializing the database..."
  echo Initializing the database...
#  $SSH_CA_TOOL $DSN -i >/dev/null
shf_logit "calling \"$SSH_CA_TOOL\""
   $SSH_CA_TOOL $DSN -i
rc=$?
shf_logit "external program \"$SSH_CA_TOOL $DSN -i\" exited \"$rc\""
  # Inject our entropy to the database
shf_logit "Injecting entropy to the database..."
   echo Injecting entropy to the database...
   $SSH_CA_TOOL $DSN -r $ENTROPY_SOURCE
  rc=$$
  shf_logit "external program \"$SSH_CA_TOOL $DSN -r $ENTROPY_SOURCE\" exited \"$rc\"" 
   ENTROPY_INJECTED=true
  if [ ${DELETE_ENTROPY_SOURCE:-X} != X ]; then
    rm $ENTROPY_SOURCE
  fi
shf_logit "calling ssh-random-tool ..."
  ./bin/ssh-random-tool 1 >/dev/null 2>&1
  if [ $? = 0 ]; then
   ./bin/ssh-random-tool -q | $SSH_CA_TOOL $DSN -r -
   echo
	shf_logit "Injected entropy from nFast module to the database"
   echo Injected entropy from nFast module to the database.
  fi
shf_logit "Generating the TLS CA for Certifier internal use..."
  echo Generating the TLS CA for Certifier internal use...
  (
  cat  <<EOT
(certificate
  (type "pkcs-10")
  (generate-key-pair)
EOT
  echo "  (subject-name  \"$TLSCA_SUBJECT_NAME\")" | sed -e 's/\\/\\\\/g'
  echo "  (validity (not-before \"$NOT_BEFORE\")"
  echo "            (not-after \"$TLSCA_NOT_AFTER\"))"

  cat <<EOT
  (extensions (key-usage (digital-signature "#t")
                         (key-encipherment "#t")
                         (key-cert-sign "#t"))
              (basic-constraints (ca "#t")
                                 (path-length "0")
                                 (critical "#t")))
EOT
  echo "  (private-key (type \"$KEYTYPE\")"
  echo "               (size \"$TLSCA_KEYLEN\")"
  echo "               (signature-alg \"$SIGNATURE_ALGORITHM\")"
  echo "               (encrypt-alg \"$ENCRYPTION_ALGORITHM\")))"
  cat <<EOT
(create-ca (operator "0")
           (data (name "Insta Certifier Internal CA")
                 (description "CA for Certifier internal TLS communication "
			      "and operational use")
                 (status "public")
                 (policy (receive-request (set-validity-period
					   (length 3)
					   (type 2592000)
					   (overwrite #t))
					  (conditional-policy
					   (clause 
					    (test
					     (module issue-automatic)
					     (issue-automatic
					      (mode entity-type-server)))
					    (chain
					     (add-policy-info
					      (oid certifier-server)
					      (qtype notice-text)
					      (content "Insta Certifier Server "
						       "Internal Certificate")
					      (overwrite #t))
					     (accept-all
					      (null)))))
					  (conditional-policy
					   (clause
					    (test
					     (module issue-automatic)
					     (issue-automatic
					      (null)
					      (mode entity-type-operator)))
					    (chain
					     (add-policy-info
					      (null)
					      (oid certifier-operator)
					      (qtype notice-text)
					      (content "Insta Certifier "
						       "Operator Certificate")
					      (overwrite #t))
					     (accept-all
					      (null)))))
					  (issue-manual
					   (null)))
                         (accept-request (accept-all (priority "0")))
                         (view-request (accept-all (priority "0")))
                         (update-request (accept-all (priority "0"))))))
EOT
  ) | $SSH_CA_TOOL $DSN -g -
  if [ $? != 0 ]; then
    echo TLS CA certificate generation failed.
shf_logit "ERROR: TLS CA certificate generation failed"
    dbstop $SYBASE_SERVER_NAME
    exit 7
  fi

  unset SSH_SOCKS_SERVER
  echo "Starting engine in insecure configuration mode..."
shf_logit "Starting engine in insecure configuration mode..."
  $SSH_CA_ENGINE ./conf/engine-insecure.conf
  echo Initializing the database more...
shf_logit "Initializing the database more..."
  $SSH_CA_ENGINECTL -R -l ./lib -e ./lib/database-setup.scm -ca-name="Insta Certifier Internal CA" -psk=this_is_very_secret 

  echo "Insecure engine stopped."
  sleep 1
  rm $CERTIFIER_DIR/var/run/*engine* >/dev/null 2>&1
else
  if [ -d $CERTIFIER_DIR/pki-sshbak ]; then
     if [ -d $CERTIFIER_DIR/var/pki ] ; then
        rm -rf $CERTIFIER_DIR/var/pki
     fi
     mv $CERTIFIER_DIR/pki-sshbak $CERTIFIER_DIR/var/pki
  fi
fi # INIT_DATABASE

if [ Xtrue != "X$ENTROPY_INJECTED" ]; then
  # Inject our entropy to the database
shf_logit "Inject our entropy to the database"
   echo Injecting entropy to the database...
   $SSH_CA_TOOL $DSN -r $ENTROPY_SOURCE
   ENTROPY_INJECTED=true
  if [ ${DELETE_ENTROPY_SOURCE:-X} != X ]; then
    rm $ENTROPY_SOURCE
  fi
fi


if [ X"$INIT_DATABASE" != Xfalse ]; then
  echo "Starting engine."
  shf_logit "Launching server initialization..."
  $SSH_CA_ENGINE ./conf/engine.conf
  echo Launching server initialization...
  CERTIFIER_SERVERPASS=${CERTIFIER_SERVERPASS:-""}
  export CERTIFIER_SERVERPASS
  sleep 1
  $SSH_CA_SERVER -d 0 -E 'this_is_very_secret' ./conf/server.conf 
  if [ $? != 0 ]; then
    dbstop $SYBASE_SERVER_NAME
    exit 2
  fi
fi # INIT_DATABASE

if [ -f ssh-ca-start ]; then
  rm -f ssh-ca-start
fi

if [ -f ssh-ca-stop ]; then
  rm -f ssh-ca-stop
fi


if [ "X"$INSTALL_SYBASE = "Xtrue" ] ; then
  if [ "X"$RANDOMIZE_DBA_PWD = "Xtrue" ]; then
    echo  'Randomizing the Sybase administrator (DBA user) password'
    DBPASSFILE="$CERTIFIER_DIR/var/dbpass$$"
    touch "$DBPASSFILE"
    chmod 600 "$DBPASSFILE"
    $SSH_CA_TOOL DSN=certifier -V SshSql=1 -G >"$DBPASSFILE"
    rv=$?
    DBPASS=`cat "$DBPASSFILE"`
##############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# removed following lines:
# 
#============================================================
# added following lines
  shf_logit "set DBA pass to ${DBPASS}"
###############################################################
#
    rm "$DBPASSFILE"
    if [ "X$rv" != X0 -o "X$DBPASS" = X ]; then
      echo Failed to set the database password.
      dbstop $SYBASE_SERVER_NAME
      exit 6
    fi
  fi
  #
  # Create the real odbc.ini
  #
  shf_logit "Create the real odbc.ini"
  echo "["$DSN"]" | sed -e 's/DSN=//g' -e 's/;.*/]/g' >$ODBCINI
  if [ "X$HPUX_INSTALL" = Xtrue ] ; then
    echo 'Driver='${SYBASE_DIR_LIB}/${DBODBC}.sl.1 >>$ODBCINI
  else
    echo 'Driver='${SYBASE_DIR_LIB}/${DBODBC}.so.1  >>$ODBCINI
  fi

  if [ $CREATE_ENP = "true" ]; then
    cat >>$ODBCINI <<EOF
UID=DBA
PWD=$DBPASS
EOF
  fi
  cat >>$ODBCINI <<EOF
DatabaseName=$SYBASE_DATABASE_NAME
EngineName=$SYBASE_SERVER_NAME
EOF
  chmod 600 ${ODBCINI}
  sleep 1; sync
fi

#
# Create SNMP user
#
shf_logit "Create SNMP user"
if [ "X$SETUP_SNMP" = "Xtrue" -a "X$SNMP_ENABLED" = "Xtrue" ]; then
  SNMPD_CONF=/etc/snmp/snmpd.conf
  VAR_SNMPD_CONF=/var/net-snmp/snmpd.conf
  if [ ! -w $VAR_SNMPD_CONF ]; then
    VAR_SNMPD_CONF=/var/lib/net-snmp/snmpd.conf
  fi
  if [ ! -w $VAR_SNMPD_CONF ]; then
    service snmpd start &>/dev/null
    sleep 2
  fi
  if [ ! -w $VAR_SNMPD_CONF ]; then
    VAR_SNMPD_CONF=/var/net-snmp/snmpd.conf
  fi

  if [ ! -w $VAR_SNMPD_CONF ]; then
    echo
    echo "No /var/net-snmp/snmpd.conf or /var/lib/net-snmp/snmpd.conf found."
    echo "Unable to create SNMP user."
  else
    SNMP_USER=certifier
    SNMP_PASSWORD=
    echo
    echo "Creating SNMP user credentials to be used for authorisation of clients"
    echo "that make SNMP queries to this host."
    echo -n "Enter SNMP user name (default $SNMP_USER): "
##############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# removed following lines:
#
#    read snmp_user
#    if [ "X$snmp_user" != "X" ]; then
#      SNMP_USER=$snmp_user
#    fi
#    password_query "Enter SNMP user password (at least 8 characters):"
#    SNMP_PASSWORD=$password
#============================================================
# added following lines
 SNMP_USER="${SNMPUSER}"
 SNMP_PASSWORD="${SNMPV3PASSPHRASE[$X]}"
 printf "\n"
 shf_logit "set SNMPv3 USM query-pass for ${SNMP_USER} to ${SNMP_PASSWORD}"
###############################################################
#
    service snmpd stop &>/dev/null
    sleep 1
cat <<EOF >>$VAR_SNMPD_CONF
createUser $SNMP_USER SHA "$SNMP_PASSWORD" DES
EOF
    tmp=`grep -c "master agentx" $SNMPD_CONF`
    if [ "X$tmp" = "X0" ]; then
      echo "master agentx" >>$SNMPD_CONF
    fi
    tmp=`grep -c agentXSocket $SNMPD_CONF`
    if [ "X$tmp" = "X0" ]; then
      echo "agentXSocket /var/agentx/master" >>$SNMPD_CONF
    fi
    tmp=`grep -c "certfier daemon" $SNMPD_CONF`
    if [ "X$tmp" = "X0" ]; then
      echo "agentXPerms 0777 0777 certfier daemon" >>$SNMPD_CONF
    fi
##############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# removed following lines:
#
#    tmp=`grep -i -c "user $SNMP_USER auth" $SNMPD_CONF`
#    if [ "X$tmp" = "X0" ]; then
#      echo "rouser $SNMP_USER auth" >>$SNMPD_CONF
#    fi
###############################################################
#
 shf_logit "no creation \"rouser ${SNMP_USER} auth\" in $SNMPD_CONF make sure config_snmpd.sh has done this job"
#
###############################################################
    if [ -d /var/agentx ]; then
      chmod o+rwx /var/agentx
    else
      mkdir /var/agentx
      chmod 777 /var/agentx
    fi
    service snmpd start &>/dev/null
  fi
fi
##############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# removed following lines:
#
###############################################################
#
 [ ! -z "$(ls /var/agentx/master 2>/dev/null)" ] && shf_logit "using agentXSocket: \"`ls -la /var/agentx/master`\""
#
###############################################################
##############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# In case snmptrapd is needed for conversion we must enter the
# certifier engineID into its config. THis was not possible
# before we arrive here. Use a install function to automatically
# create correct trap user
#
###############################################################
#
 shf_snmpengineid_to_trapdconf
#
# Create bin/ssh-ca-dbstart script
#
shf_logit "Create bin/ssh-ca-dbstart script"
if [ "X"$INSTALL_SYBASE = "Xtrue" ] ; then
cat <<EOF 
#!/bin/sh
SSH_CA_GET_DBCONN=true
. $CERTIFIER_DIR/bin/ssh-ca-env
cd $SYBASE_DIR
dbping -q >/dev/null 2>&1 && exit 42

exec_as_certifier_user $CERTIFIER_DIR/bin/ssh-ca-runenv dbspawn -q \$DBENG -gk all -n certdbeng -s local0 $CERTIFIER_DIR/sybase/certifier.db 2> /dev/null

cd $CERTIFIER_DIR
sync
dbping -q >/dev/null 2>&1
if [ \$? != 0 ]; then
  echo Certifier database failed to start.
shf_logit "Certifier database failed to start"
  exit 1
fi
EOF
else
echo echo XXX Sybase is not installed. Please edit
echo echo XXX $CERTIFIER_DIR/bin/ssh-ca-dbstart and
echo echo XXX $CERTIFIER_DIR/bin/ssh-ca-dbstop to start/stop your database.
fi >./bin/ssh-ca-dbstart

##############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# removed following lines:
#
###############################################################
#
 FILE="$CERTIFIER_DIR/bin/ssh-ca-dbstart"
 shf_logit "created \"`cat ${FILE}|wc -l`\" lines by here-text \"`ls -la ${FILE}`\""
#
###############################################################



#
# Create bin/ssh-ca-dbstop script
#
shf_logit "Create bin/ssh-ca-dbstop script"
if [ "X"$INSTALL_SYBASE = "Xtrue" ] ; then
cat <<EOF 
#!/bin/sh
SSH_CA_GET_DBCONN=true . $CERTIFIER_DIR/bin/ssh-ca-env
dbstop -q -x >/dev/null 2>&1

count=0
while dbping -q >/dev/null 2>&1; do
  sleep 1
  dbstop -q -x >/dev/null 2>&1
  count=\`expr \$count + 1\`
  if [ \$count -gt 60 ] ; then
    echo Stopping Certifier database more brutally.
    dbstop -q -y 
    sleep 5
    count=0
  fi
done
EOF
else
  echo echo \'XXX Sybase is not installed. Stop your DB here. XXX\'
fi >./bin/ssh-ca-dbstop
##############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# removed following lines:
#
###############################################################
#
 FILE="$CERTIFIER_DIR/bin/ssh-ca-dbstop"
 shf_logit "created \"`cat ${FILE}|wc -l`\" lines by here-text \"`ls -la ${FILE}`\""
#
###############################################################
#
# Create ssh-ca-runenv script
#
cat <<EOF >./bin/ssh-ca-runenv
#!/bin/sh
if [ "X\$1" = "Xsu" ]; then
  shift
  . $CERTIFIER_DIR/bin/ssh-ca-env
  eval exec_as_certifier_user \$@
else
  . $CERTIFIER_DIR/bin/ssh-ca-env
  eval \$@
fi
EOF
##############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# removed following lines:
#
###############################################################
#
 FILE="$CERTIFIER_DIR/bin/ssh-ca-runenv"
 shf_logit "created \"`cat ${FILE}|wc -l`\" lines by here-text \"`ls -la ${FILE}`\""
#
###############################################################
#
# Create ssh-ca-start script
#
shf_logit "Create ssh-ca-start script"
cat <<EOF >ssh-ca-start
#!/bin/sh
. $CERTIFIER_DIR/bin/ssh-ca-env
SERVER_CONF=./conf/server.conf
ENGINE_CONF=./conf/engine.conf
DEBUG_STRING=0
START_XTERMS=\${START_XTERMS:-false}
SSHSCM_STACK_TRACE=no
SSHSCM_DEBUG_LEVEL=0
RUN_ALL=true
ENG=ssh-ca-engine
SRV=ssh-ca-server
SNMP_AGENT=certifier-snmp-daemon

cd \$CERTIFIER_DIR
ENG_DAEMON="-x"
SRV_DAEMON="-x"
while [ \$# != "0" ]; do
    case "\$1" in
    insecure)
    SERVER_CONF=./conf/server-insecure.conf
    ENGINE_CONF=./conf/engine-insecure.conf
    ;;
    DEBUG)
    ENG=ssh-ca-engine-debug
    SRV=ssh-ca-server-debug
    shift
    DEBUG_STRING=\$1
    SSHSCM_DEBUG_LEVEL=5
    SSHSCM_STACK_TRACE=yes
    ulimit -c unlimited
    ;;
    debug)
    ENG=ssh-ca-engine-debug
    SRV=ssh-ca-server-debug
    DEBUG_STRING='SshCa*=5'
    SSHSCM_DEBUG_LEVEL=5
    SSHSCM_STACK_TRACE=yes
    ulimit -c unlimited
    ;;
    server)
    RUN_ALL=false
    RUN_SERVER=true
    ;;
    engine)
    RUN_ALL=false
    RUN_ENGINE=true
    ;;
    SERVER)
    RUN_ALL=false
    RUN_SERVER=true
    SRV_DAEMON=""
    ;;
    ENGINE)
    RUN_ALL=false
    RUN_ENGINE=true
    ENG_DAEMON=""
    ;;
    database)
    RUN_ALL=false
    RUN_DATABASE=true
    ;;
    dbsrv)
    RUN_DBSRV=true
    ;;
    X)
    START_XTERMS=true
    ;;
    snmpd)
    RUN_ALL=false
    RUN_SNMPD=true
    ;;
    *)
    echo Usage: ssh-ca-start [ insecure ] [ debug ] [ X ] [ server ] [ engine ]
    echo                     [ database ] [ dbsrv ]
    exit 1
    ;;
    esac
    shift
done

rm \$CERTIFIER_DIR/var/run/*@*.pid  >/dev/null 2>&1 </dev/null

if [ X\$RUN_ALL = Xtrue ]; then
  RUN_SERVER=true
  RUN_ENGINE=true
  RUN_DATABASE=true
  RUN_SNMPD=true
  RUN_SNMP_AGENT=true
fi

export SSHSCM_STACK_TRACE
export SSHSCM_DEBUG_LEVEL
export START_XTERMS

if [ X\$RUN_DATABASE = Xtrue ]; then
  if [ X\$RUN_DBSRV = Xtrue ]; then
    DBENG=dbsrv12
    export DBENG
  fi
  ./bin/ssh-ca-dbstart
  if [ \$? != 0 ]; then
     exit 66
  fi
fi


if [ -t 0 -a X\$RUN_SERVER = Xtrue ]; then
  first=yes
  until exec_as_certifier_user "./bin/ssh-ca-runenv ./bin/ssh-ca-server -k conf/server.conf"; do
    if [ \$first != "yes" ] ; then
      echo; echo Server password incorrect.
    else
      cat <<EOF2

Enter Certifier server password. If you do not enter anything (ie.
just press enter), the Certifier server will not start.
EOF2
    fi
    first=no
    printf "Server password? "
    sttybak=\`stty -g\`
    trap "stty \$sttybak; exit 8" 1 2 3 6
    stty -echo
    read spass
    stty \$sttybak
    trap 1 2 3 6
    if [ "X\$spass" != "X" ]; then
      CERTIFIER_SERVERPASS=\$spass
      export CERTIFIER_SERVERPASS
    else
      RUN_SERVER="false"
      unset CERTIFIER_SERVERPASS
      echo The Certifier server will not be started.
      break;
    fi
  done
fi

if [ -t 0 -a X\$RUN_ENGINE = Xtrue ]; then
  CERTIFIER_MASTERPASS="this_is_very_secret"
  export CERTIFIER_MASTERPASS
  ENGOPTS="-p -d"
  first=yes
  until exec_as_certifier_user "./bin/ssh-ca-runenv ./bin/ssh-ca-tool $DSN -m >/tmp/rv\$\$" ; sh /tmp/rv\$\$; do
    if [ \$first != "yes" ] ; then
      echo; echo Passphrase incorrect.
    else
      cat <<EOF2

Enter Certifier master password. If you do not enter anything (ie.
just press enter) and have selected "Encrypt TLS private key" and changed
the default master password, the system will not start. If you have just
changed the master password, the system will start but cannot issue
certificates or CRLs until the master password is entered via the web admin
interface.
EOF2
      first=no
    fi
    printf "Master passphrase? "
    sttybak=\`stty -g\`
    trap "stty \$sttybak; exit 7" 1 2 3 6
    stty -echo
    read mpass
    stty \$sttybak
    trap 1 2 3 6
    if [ "X\$mpass" != "X" ]; then
      CERTIFIER_MASTERPASS=\$mpass
    else
      ENGOPTS="-d"
      unset CERTIFIER_MASTERPASS
      echo
      echo Starting the system without master passphrase.
      break;
    fi
  done
  rm /tmp/rv\$\$ >/dev/null 2>&1
else
  ENGOPTS="-d"
fi

SNMP_ENABLED=true
grep "snmp (enabled \"true\")" \$ENGINE_CONF > /dev/null 2>&1 || SNMP_ENABLED=false

if [ X\$SNMP_ENABLED = Xtrue -a X\$RUN_SNMPD = Xtrue ]; then
  tmp=\`pidof snmpd\`
  if [ X\$tmp = X ]; then
    service snmpd start &>/dev/null
  fi
fi

if [ X\$SNMP_ENABLED = Xfalse ]; then
  RUN_SNMP_AGENT=false
fi

if [ Xtrue = X\$START_XTERMS ]; then
  if [ X\$RUN_ENGINE = Xtrue ]; then
    eval xterm -T Certifier_Engine -sb -sl 2048 -e ./bin/ssh-ca-runenv su ./bin/\$ENG \$ENGOPTS \$DEBUG_STRING \$ENGINE_CONF &
    sleep 2
  fi
  if [ X\$RUN_SERVER = Xtrue ]; then
    eval xterm -T Certifier_Server -sb -sl 2048 -e ./bin/ssh-ca-runenv su ./bin/\$SRV -d \$DEBUG_STRING \$SERVER_CONF &
  fi
  if [ X\$RUN_SNMP_AGENT = Xtrue ]; then
    eval xterm -T Certifier_SNMP_Agent -sb -sl 2048 -e ./bin/ssh-ca-runenv su ./bin/\$SNMP_AGENT -d &
  fi
else
  if [ X\$RUN_ENGINE = Xtrue ]; then
    exec_as_certifier_user ./bin/ssh-ca-runenv $CERTIFIER_DIR/bin/\$ENG \$ENG_DAEMON \$ENGOPTS \$DEBUG_STRING \$ENGINE_CONF
  fi
  if [ X\$RUN_SERVER = Xtrue ]; then
    exec_as_certifier_user ./bin/ssh-ca-runenv $CERTIFIER_DIR/bin/\$SRV \$SRV_DAEMON -d \$DEBUG_STRING \$SERVER_CONF
  fi
  if [ X\$RUN_SNMP_AGENT = Xtrue ]; then
    exec_as_certifier_user ./bin/ssh-ca-runenv $CERTIFIER_DIR/bin/\$SNMP_AGENT -d
  fi
fi
if [ X\$RUN_ENGINE = Xtrue -a -r ./var/pins ]; then
  sleep 1
  echo "CA PIN file found, feeding them to the CA engine."
  exec_as_certifier_user ./bin/ssh-ca-pins -feed
fi
EOF
##############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# removed following lines:
#
###############################################################
#
 FILE="$CERTIFIER_DIR/ssh-ca-start"
 shf_logit "created \"`cat ${FILE}|wc -l`\" lines by here-text \"`ls -la ${FILE}`\""
#
###############################################################


#
# Create ssh-ca-stop script
#
shf_logit "Create ssh-ca-stop script"
( cat <<EOF 
#!/bin/sh
PATH=\$PATH:/bin:/usr/bin
cd $CERTIFIER_DIR/var/run
enginepid=
if [ "X" != "X\`ls | grep ..\*@..\*\\.pid\`" ] ; then
  if [ "X" != "X\`ls | grep ssh-ca-engine@.\*.pid\`" ] ; then
    enginepid=\`cat ssh-ca-engine@*.pid\`
    if [ X\${enginepid} = "X" ]; then
      exit 1
    fi
  fi
  
  for i in \`cat *@*.pid\`; do
     kill -TERM \$i
     sleep 1
  done
  rm *@*.pid  >/dev/null 2>&1 </dev/null
  count=0
  if [ X\${enginepid} != "X" ]; then
    while kill -0 \$enginepid  >/dev/null 2>&1; do
      count=\`expr \$count + 1\` 
      if [ \$count -gt 30 ] ; then
        echo Stopping Certifier engine more brutally. 1>&2
        kill -9 \$enginepid
        sleep 1 &
        enginepid=\$!
      fi
      sleep 1
    done
  fi
else
  killall -s TERM ssh-ca-server >/dev/null 2>&1
  killall -s TERM ssh-ca-engine >/dev/null 2>&1
fi
  killall -s TERM certifier-snmp-daemon >/dev/null 2>&1
. $CERTIFIER_DIR/bin/ssh-ca-dbstop
exit 0
EOF
) >ssh-ca-stop
##############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# removed following lines:
#
###############################################################
#
 FILE="$CERTIFIER_DIR/ssh-ca-stop"
 shf_logit "created \"`cat ${FILE}|wc -l`\" lines by here-text \"`ls -la ${FILE}`\""
#
###############################################################

for i in ssh-ca-start ssh-ca-stop ./bin/ssh-ca-runenv ./bin/ssh-ca-dbstart ./bin/ssh-ca-dbstop ; do
  chmod 750 $i
  if [ "Xtrue" = "X$SOLARIS_INSTALL" -o "Xtrue" = "X$LINUX_INSTALL" -o \
       "Xtrue" = "X$HPUX_INSTALL" ] ; then
    chown bin $i
    chgrp bin $i
  fi
done

$CERTIFIER_DIR/ssh-ca-stop
shf_logit "Create sh-ca-set-startmode script"
cat >"$CERTIFIER_DIR/lib/ssh-ca-set-startmode" <<EOF
#!/bin/sh
case "\$1" in
auto)
 "$CERTIFIER_DIR/lib/ssh-ca-initd-tool" uninstall 77 77 certifier
 "$CERTIFIER_DIR/lib/ssh-ca-initd-tool" install 77 77 certifier "Insta Certifier $NEW_VERSION" "Insta Certifier main installation" "$CERTIFIER_DIR/ssh-ca-start" "$CERTIFIER_DIR/ssh-ca-stop" "$CERTIFIER_DIR/ssh-ca-start snmpd"
;;
auto-engine)
 "$CERTIFIER_DIR/lib/ssh-ca-initd-tool" uninstall 77 77 certifier
 "$CERTIFIER_DIR/lib/ssh-ca-initd-tool" install 77 77 certifier "Insta Certifier $NEW_VERSION" "Insta Certifier engine" "echo $CERTIFIER_DIR/ssh-ca-start database engine" "$CERTIFIER_DIR/ssh-ca-stop"
;;
manual)
  "$CERTIFIER_DIR/lib/ssh-ca-initd-tool" uninstall 77 77 certifier
;;
*)
  echo 'Usage: ssh-ca-set-startmode auto|manual'
  exit 1
;;
esac
EOF
 FILE="$CERTIFIER_DIR/lib/ssh-ca-set-startmode"
 shf_logit "created \"`cat ${FILE}|wc -l`\" lines by here-text \"`ls -la ${FILE}`\""
echo
echo Certifier engine and database will syslog to facility local0, and 
echo Certifier server will syslog to facility local1.
echo 

 shf_logit "going through that syslog stuff"
TMPSLC=$CERTIFIER_DIR/var/syslogconf.inc
SYSLOG_CONF=/etc/syslog.conf
if [ ! -f $SYSLOG_CONF ]; then
  SYSLOG_CONF=/etc/rsyslog.conf
fi

if [ -r $CERTIFIER_DIR/syslogconf.inc-sshbak ] ; then
   mv $CERTIFIER_DIR/syslogconf.inc-sshbak $TMPSLC
fi

if [ -f $TMPSLC ]; then
  echo "Your syslog configuration in $SYSLOG_CONF was not modified."
  if [ -d $CERTIFIER_DIR/log-sshbak ]; then
     if [ -d $CERTIFIER_DIR/var/log ] ; then
        rm -rf $CERTIFIER_DIR/var/log
     fi
     mv $CERTIFIER_DIR/log-sshbak $CERTIFIER_DIR/var/log
  fi
else
  if [ -w $SYSLOG_CONF ] ; then
    cat <<EOF >$TMPSLC
# Syslog configuration for Insta Certifier main installation BEGIN
local0.debug				-$CERTIFIER_DIR/var/log/engine.log
local1.debug				-$CERTIFIER_DIR/var/log/server.log
# Syslog configuration for Insta Certifier main installation END
EOF
    $CERTIFIER_DIR/lib/ssh-ca-syslogconf-tool -c '^local[01]' $TMPSLC $SYSLOG_CONF
    if [ $? = 0 ]; then

      if [ -d $CERTIFIER_DIR/log-sshbak ]; then
        if [ -d $CERTIFIER_DIR/var/log ] ; then
           rm -rf $CERTIFIER_DIR/var/log
        fi
        mv $CERTIFIER_DIR/log-sshbak $CERTIFIER_DIR/var/log
      else
        mkdir $CERTIFIER_DIR/var/log
        # Label the file for SELinux if needed
        if [ $SELINUX_STATUS = "enabled" ] ; then
          chcon -t var_log_t $CERTIFIER_DIR/var/log
        fi
      fi

      chmod 755 $CERTIFIER_DIR/var/log
      touch $CERTIFIER_DIR/var/log/engine.log $CERTIFIER_DIR/var/log/server.log
      chmod 600 $CERTIFIER_DIR/var/log/engine.log $CERTIFIER_DIR/var/log/server.log
###############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# removed following lines:
#  sh $CERTIFIER_DIR/lib/ssh-ca-syslogconf-tool -s '^local[01]' $TMPSLC $SYSLOG_CONF 
#============================================================
# added following lines
  shf_logit "changing syslog settings with insta tool"
  sh $CERTIFIER_DIR/lib/ssh-ca-syslogconf-tool -s '^local[01]' $TMPSLC $SYSLOG_CONF <<EOSLOG
y
EOSLOG
###############################################################

    else
      echo
      echo Your syslog configuration file was not automatically updated. It seems that
      echo your syslog configuration already contains rules for syslog facilities which
      echo are used by Certifier. Please check that your $SYSLOG_CONF directs
      echo facilities local0 and local1 to some reasonable place.
      echo If your system already uses syslog facilities local0 and local1 for some
      echo other purpose, you must edit files conf/engine.conf, conf/server.conf and
      echo bin/ssh-ca-dbstart to configure Certifier to use some other
      echo syslog facilities.
      if [ -d $CERTIFIER_DIR/log-sshbak ]; then
        if [ -d $CERTIFIER_DIR/var/log ] ; then
           rm -rf $CERTIFIER_DIR/var/log
        fi
        mv $CERTIFIER_DIR/log-sshbak $CERTIFIER_DIR/var/log
      fi
      rm $TMPSLC
    fi
  else
    echo
    echo Your syslog configuration file was not automatically updated due to
    echo insufficient privileges.
  fi
fi
echo

if [ "Xtrue" = "X"$CREATE_CERTIFIER_USER -a Xroot != "X"$CERTIFIER_USER ]; then
  if useradd -g daemon $CERTIFIER_USER; then
     echo User $CERTIFIER_USER created.
     chown -R $CERTIFIER_USER $CERTIFIER_DIR/
     if (id | egrep 'daemon|root' >/dev/null 2>&1 ); then
       chgrp -R daemon $CERTIFIER_DIR/
     fi
  else
     echo Failed to create user ${CERTIFIER_USER}.
     exit 8
  fi
else
  chown -R $CERTIFIER_USER $CERTIFIER_DIR/
  if ( chgrp daemon $CERTIFIER_DIR ) ; then
    chgrp -R daemon $CERTIFIER_DIR/
  fi
fi

##############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# removed following lines:
#
#============================================================
# added
  shf_logit "added local user: \"`grep "^${CERTIFIER_USER}" /etc/passwd`\""
###############################################################

echo $CERTIFIER_USER >$CERTIFIER_DIR/lib/certifier_user
chown $CERTIFIER_USER $CERTIFIER_DIR/lib/certifier_user
chmod 640 $CERTIFIER_DIR/lib/certifier_user

chown $CERTIFIER_USER "$CERTIFIER_DIR/lib/ssh-ca-set-startmode"
chmod 750 "$CERTIFIER_DIR/lib/ssh-ca-set-startmode"

$CERTIFIER_DIR/lib/ssh-ca-set-startmode auto
if [ $? = 0 ]; then
    RCSETUP=true
else
    RCSETUP=false
fi

#
# Upgrade chores
#
case "X$OLD_VERSION" in
  X)
  ;;
  X5.0.0)
  echo
  echo "Upgrading from the current version: this should happen only"
  echo "in Insta internal testing."
  echo
  ;;
  X3.3.0|X4.0.*|X4.1.0|X4.2.*|X4.3.0beta|X4.3.0|X4.3.1|X4.3.2|X4.4.*)
  # Nothing special, SQL Anywhere 12 already upgraded earlier
  ;;
  X3.0.0|X3.0.1|X3.0.2|X3.1.0|X3.1.1|X3.2.0|X3.2.1)
  # Delegated RA asl has been changed
  chmod 640 ./conf/engine-insecure.conf
  echo
  echo "Enter operator name with super-admin priviledges for database upgrade."
  echo "(default is $ADMIN_OPERATOR_NAME)"
  printf "Operator name? "
  read opname
  if [ "X$opname" != "X" ]; then
    ADMIN_OPERATOR_NAME=$opname
  fi
  echo "$CERTIFIER_DIR/ssh-ca-start database insecure engine"
  $CERTIFIER_DIR/ssh-ca-start database insecure engine
  sleep 1
  $CERTIFIER_DIR/bin/ssh-ca-enginectl -R -e -t 600 -f ./conf/server.conf ./lib/database-upgrade.scm -target=5.0.0 -old=$OLD_VERSION -op=$ADMIN_OPERATOR_NAME
  sleep 1
  $CERTIFIER_DIR/ssh-ca-stop
  ;;
  X1.*|X2.*|*)
  echo
  echo "UPGRADING FROM ANY PRE v3.0.0 VERSION IS UNSUPPORTED."
  echo
  echo "You may run ssh-ca-repair to upgrade your system, but"
  echo "please note that the resulting Certifier installation is"
  echo "not completely operational and not at all supported."
  echo
  ;;
esac

if [ -e ./lib/ssh-ca-encrypt-db-password.sh ]; then
  ./lib/ssh-ca-encrypt-db-password.sh
fi

echo
echo Certifier installation complete.
if [ X$RCSETUP = Xtrue ] ; then
  echo 'Certifier will start automatically at system boot.'
##############################################################
#
# NSN HAPF20 modifications done here :
#-------------------------------------------------------------
# removed following lines:
#
#============================================================
# added following lines
  shf_logit "HAPF20 will disable certifier init-start (previous other messages are missleading)"
###############################################################

else
  echo 'Certifier will _NOT_ start automatically at system boot.'
fi

echo
echo Please run $CERTIFIER_DIR/ssh-ca-start to start Certifier now.

echo When Certifier is running, the Administration Service is located at
echo URL: "http://"`hostname`":8083/"
#
shf_logit "leaving Insta setup routine ssh-ca-setup for BE role"
shf_logit "#--------------------------------------------------------------------------"
